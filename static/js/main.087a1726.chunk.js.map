{"version":3,"sources":["components/EmployeeCard.jsx","containers/Search.jsx","components/NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["EmployeeCard","props","className","alt","name","src","image","lastName","age","email","city","country","Search","state","employees","searchValue","value","handleSearch","searchedItem","filteredEmployees","filter","employee","first","includes","setState","console","log","axios","get","then","response","data","results","catch","err","event","this","target","type","onChange","handleOnChange","placeholder","map","key","login","uuid","last","picture","medium","location","dob","Component","NavBar","to","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8PA0BeA,EAvBM,SAACC,GAClB,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,iBACnB,yBAAKC,IAAKF,EAAMG,KAAMC,IAAKJ,EAAMK,SAEnC,yBAAKJ,UAAU,WACb,4BACE,4BACE,yCADF,IAC0BD,EAAMG,KADhC,IACuCH,EAAMM,SAD7C,IACuD,wCADvD,IAC8EN,EAAMO,KAEpF,4BACE,0CADF,IAC2BP,EAAMQ,OAEjC,4BACE,6CADF,IAC8BR,EAAMS,KADpC,KAC4CT,EAAMU,aCyD7CC,E,4MAtEbC,MAAQ,CACNC,UAAW,GACXC,YAAa,GACbC,MAAO,I,EAmBTC,aAAe,SAACC,GACd,IAAMC,EAAoB,EAAKN,MAAMC,UAAUM,QAAO,SAACC,GAAD,OACpDA,EAASjB,KAAKkB,MAAMC,SAASL,MAG/B,EAAKM,SAAS,CAAEV,UAAWK,IAC3BM,QAAQC,IAAI,EAAKb,MAAME,c,kEAtBJ,IAAD,OAClBY,IACGC,IAAI,0CACJC,MAAK,SAACC,GACL,EAAKN,SAAS,CAAEV,UAAWgB,EAASC,KAAKC,aAE1CC,OAAM,SAACC,GACNT,QAAQC,IAAIQ,Q,qCAIHC,GACbC,KAAKZ,SAAS,CAAER,MAAOmB,EAAME,OAAOrB,QACpCoB,KAAKnB,aAAamB,KAAKvB,MAAMG,S,+BAY7B,OACE,yBAAKd,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,gDAEF,yBAAKA,UAAU,OACb,6BACE,gDACA,2BACEoC,KAAK,OACLtB,MAAOoB,KAAKvB,MAAMG,MAClBuB,SAAUH,KAAKI,eACfC,YAAY,YAKpB,yBAAKvC,UAAU,OACb,yBAAKA,UAAU,OACZkC,KAAKvB,MAAMC,UAAU4B,KAAI,SAACrB,GAAD,OACxB,kBAAC,EAAD,CACEsB,IAAKtB,EAASuB,MAAMC,KACpBzC,KAAMiB,EAASjB,KAAKkB,MACpBf,SAAUc,EAASjB,KAAK0C,KACxBxC,MAAOe,EAAS0B,QAAQC,OACxBvC,MAAOY,EAASZ,MAChBE,QAASU,EAAS4B,SAAStC,QAC3BD,KAAMW,EAAS4B,SAASvC,KACxBF,IAAKa,EAAS6B,IAAI1C,gB,GA7Db2C,aCSNC,EAVA,WACb,OACE,yBAAKlD,UAAU,iDACb,kBAAC,IAAD,CAAMmD,GAAI,IAAInD,UAAU,gBAAxB,qBCQSoD,MATf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW7C,MCGnB8C,QACW,cAA7BC,OAAOV,SAASW,UAEe,UAA7BD,OAAOV,SAASW,UAEhBD,OAAOV,SAASW,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdtC,OAAM,SAAAuC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.087a1726.chunk.js","sourcesContent":["import React from \"react\";\n\n\nconst EmployeeCard = (props) => {\n    return (\n        <div className=\"card\">\n            <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n      <div className=\"content\">\n        <ul>\n          <li>\n            <strong>Name:</strong> {props.name} {props.lastName} <strong>Age:</strong> {props.age}\n          </li>\n          <li>\n            <strong>Email:</strong> {props.email}\n          </li>\n          <li>\n            <strong>Location:</strong> {props.city}, {props.country}\n          </li>\n        </ul>\n      </div>            \n        </div>\n    );\n};\n\nexport default EmployeeCard;","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport EmployeeCard from \"../components/EmployeeCard\";\n\nclass Search extends Component {\n  state = {\n    employees: [],\n    searchValue: \"\",\n    value: \"\",\n  };\n\n  componentDidMount() {\n    axios\n      .get(\"https://randomuser.me/api/?results=100\")\n      .then((response) => {\n        this.setState({ employees: response.data.results });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  handleOnChange(event) {\n    this.setState({ value: event.target.value });\n    this.handleSearch(this.state.value);\n  }\n\n  handleSearch = (searchedItem) => {\n    const filteredEmployees = this.state.employees.filter((employee) =>\n      employee.name.first.includes(searchedItem)\n    );\n\n    this.setState({ employees: filteredEmployees });\n    console.log(this.state.searchValue);\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1>Employees Table</h1>\n          </div>\n          <div className=\"col\">\n            <div>\n              <h4>Search by name: </h4>\n              <input\n                type=\"text\"\n                value={this.state.value}\n                onChange={this.handleOnChange}\n                placeholder=\"Name\"\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            {this.state.employees.map((employee) => (\n              <EmployeeCard\n                key={employee.login.uuid}\n                name={employee.name.first}\n                lastName={employee.name.last}\n                image={employee.picture.medium}\n                email={employee.email}\n                country={employee.location.country}\n                city={employee.location.city}\n                age={employee.dob.age}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React from \"react\";\nimport {Link} from \"react-router-dom\"\n\nconst NavBar = () => {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <Link to= \"/\" className=\"navbar-brand\">\n        Employee Finder\n      </Link>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React from 'react';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport Search from './containers/Search';\nimport NavBar from \"./components/NavBar\"\n\nfunction App() {\n  return (\n    <Router>\n      <NavBar/>\n      <Route exact path=\"/\" component={Search}/>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/EmployeeCard.jsx","containers/Home.jsx","components/NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["EmployeeCard","props","alt","name","src","image","lastName","age","email","city","country","Search","state","sortAsc","employees","search","filtered","handleOnChange","event","preventDefault","target","value","setState","console","log","filter","filteredList","item","Object","values","join","toLowerCase","indexOf","sortEmployees","sortedEmployees","sort","a","b","first","axios","get","then","response","data","results","catch","err","className","style","marginTop","this","onChange","type","placeholder","scope","onClick","map","employee","key","login","uuid","last","picture","medium","location","dob","Component","NavBar","to","App","Home","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.27fda1d7.chunk.js","sourcesContent":["import React from \"react\";\n\nconst EmployeeCard = (props) => {\n  return (\n  <tbody>\n    <tr>\n    <td><img alt={props.name} src={props.image} /></td>\n      <td>{props.name}</td>\n      <td>{props.lastName}</td>\n      <td>{props.age}</td>\n      <td>{props.email}</td>\n      <td>{props.city}, {props.country}</td>\n    </tr>\n      \n  </tbody>\n  );\n};\n\nexport default EmployeeCard;\n\n\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport EmployeeCard from \"../components/EmployeeCard\";\n\nclass Search extends Component {\n  state = {\n    sortAsc: true,\n    employees: [],\n    search: \"\",\n    filtered: [],\n  };\n\n  componentDidMount() {\n    axios\n      .get(\"https://randomuser.me/api/?results=100\")\n      .then((response) => {\n        this.setState({ employees: response.data.results, filtered: response.data.results  });\n        \n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  handleOnChange = (event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n    console.log(event.target.value)\n    const filter = event.target.value;\n    const filteredList = this.state.employees.filter(item=>{\n      let values = Object.values(item).join(\"\").toLowerCase();\n      return values.indexOf(filter.toLowerCase())!== -1;\n    });\n   this.setState({filtered: filteredList});\n  };\n\n  sortEmployees = ()=>{\n    function compareAsc(a, b){\n      if(a.name.first > b.name.first) return 1\n      if(b.name.first >a.name.first) return -1\n      return 0;\n    }\n\n    function compareDesc(a, b){\n      if(a.name.first > b.name.first) return -1\n      if(b.name.first >a.name.first) return 1\n      return 0;\n    }\n    if(this.state.sortAsc){\n      const sortedEmployees = this.state.employees.sort(compareAsc)\n      this.setState({\n        filtered: sortedEmployees,\n      sortAsc: false})\n    }\n    else {\n      const sortedEmployees = this.state.employees.sort(compareDesc)\n      this.setState({\n        filtered: sortedEmployees,\n      sortAsc: true})\n    }\n    \n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <h3 style={{marginTop: 35}}>Employees Table</h3>\n          </div>\n          <div className=\"col\">\n            <h4>Search: </h4>\n            <input\n              value={this.state.search}\n              name=\"search\"\n              onChange={this.handleOnChange}\n              type=\"text\"\n              placeholder=\"Name or Last Name\"\n            />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <table style={{marginTop: 10}} className=\"table\">\n              <thead  className=\"thead-light\">\n                <tr>\n                  <th scope=\"col\">Picture</th>\n                  <th scope=\"col\" onClick={this.sortEmployees}> <button className=\"\">First</button></th>\n                  <th scope=\"col\">Last</th>\n                  <th scope=\"col\">Age</th>\n                  <th scope=\"col\">Email</th>\n                  <th scope=\"col\">Location</th>\n                </tr>\n              </thead>\n              {this.state.filtered.map((employee) => (\n                <EmployeeCard\n                  key={employee.login.uuid}\n                  name={employee.name.first}\n                  lastName={employee.name.last}\n                  image={employee.picture.medium}\n                  email={employee.email}\n                  country={employee.location.country}\n                  city={employee.location.city}\n                  age={employee.dob.age}\n                />\n              ))}\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n\n\n\n","import React from \"react\";\nimport {Link} from \"react-router-dom\"\n\nconst NavBar = () => {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <a to= \"/\" className=\"navbar-brand\">\n        Employee Finder\n      </a>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React from 'react';\n\nimport Home from './containers/Home';\nimport NavBar from \"./components/NavBar\"\n\nfunction App() {\n  return (\n    <>\n      <NavBar/>\n      <Home/>\n    </>\n  )}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}